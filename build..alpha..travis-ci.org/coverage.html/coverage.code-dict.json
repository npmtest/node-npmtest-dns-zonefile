{"/home/travis/build/npmtest/node-npmtest-dns-zonefile/test.js":"/* istanbul instrument in package npmtest_dns_zonefile */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-dns-zonefile/lib.npmtest_dns_zonefile.js":"/* istanbul instrument in package npmtest_dns_zonefile */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_dns_zonefile = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_dns_zonefile = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-dns-zonefile/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-dns-zonefile && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_dns_zonefile */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_dns_zonefile\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_dns_zonefile.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_dns_zonefile.rollup.js'] =\n            local.assetsDict['/assets.npmtest_dns_zonefile.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_dns_zonefile.__dirname + '/lib.npmtest_dns_zonefile.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-dns-zonefile/node_modules/dns-zonefile/lib/zonefile.js":"(function () {\n    'use strict';\n\n    let defaultTemplate = `; Zone: {zone}\n; Exported  (yyyy-mm-ddThh:mm:ss.sssZ): {datetime}\n\n{$origin}\n{$ttl}\n\n; SOA Record\n{name} {ttl}\tIN\tSOA\t{mname}{rname}(\n{serial} ;serial\n{refresh} ;refresh\n{retry} ;retry\n{expire} ;expire\n{minimum} ;minimum ttl\n)\n\n; NS Records\n{ns}\n\n; MX Records\n{mx}\n\n; A Records\n{a}\n\n; AAAA Records\n{aaaa}\n\n; CNAME Records\n{cname}\n\n; PTR Records\n{ptr}\n\n; TXT Records\n{txt}\n\n; SRV Records\n{srv}\n\n; SPF Records\n{spf}\n`;\n\n    let generate = function (options, template) {\n        template = template || defaultTemplate;\n        template = process$ORIGIN(options['$origin'], template);\n        template = process$TTL(options['$ttl'], template);\n        template = processSOA(options['soa'], template);\n        template = processNS(options['ns'] || [], template);\n        template = processA(options['a'] || [], template);\n        template = processAAAA(options['aaaa'] || [], template);\n        template = processCNAME(options['cname'] || [], template);\n        template = processMX(options['mx'] || [], template);\n        template = processPTR(options['ptr'] || [], template);\n        template = processTXT(options['txt'] || [], template);\n        template = processSRV(options['srv'] || [], template);\n        template = processSPF(options['spf'] || [], template);\n        template = processValues(options, template);\n        return template.replace(/\\n{2,}/gim, '\\n\\n');\n    };\n\n    let process$ORIGIN = function (data, template) {\n        let ret = '';\n        if (typeof data !== 'undefined') {\n            ret += '$ORIGIN ' + data;\n        }\n        return template.replace('{$origin}', ret);\n    };\n\n    let process$TTL = function (data, template) {\n        let ret = '';\n        if (typeof data !== 'undefined') {\n            ret += '$TTL ' + data;\n        }\n        return template.replace('{$ttl}', ret);\n    };\n\n    let processSOA = function (data, template) {\n        let ret = template;\n        data.name = data.name || '@';\n        data.ttl = data.ttl || '';\n        Object.keys(data).map(key => {\n            ret = ret.replace('{' + key + '}', data[key] + '\\t');\n        });\n        return ret;\n    };\n\n    let processNS = function (data, template) {\n        let ret = '';\n        for (let value of data) {\n            ret += (value.name || '@') + '\\t';\n            if (value.ttl) ret += value.ttl + '\\t';\n            ret += 'IN\\tNS\\t' + value.host + '\\n';\n        }\n        return template.replace('{ns}', ret);\n    };\n\n    let processA = function (data, template) {\n        let ret = '';\n        for (let value of data) {\n            ret += (value.name || '@') + '\\t';\n            if (value.ttl) ret += value.ttl + '\\t';\n            ret += 'IN\\tA\\t' + value.ip + '\\n';\n        }\n        return template.replace('{a}', ret);\n    };\n\n    let processAAAA = function (data, template) {\n        let ret = '';\n        for (let value of data) {\n            ret += (value.name || '@') + '\\t';\n            if (value.ttl) ret += value.ttl + '\\t';\n            ret += 'IN\\tAAAA\\t' + value.ip + '\\n';\n        }\n        return template.replace('{aaaa}', ret);\n    };\n\n    let processCNAME = function (data, template) {\n        let ret = '';\n        for (let value of data) {\n            ret += (value.name || '@') + '\\t';\n            if (value.ttl) ret += value.ttl + '\\t';\n            ret += 'IN\\tCNAME\\t' + value.alias + '\\n';\n        }\n        return template.replace('{cname}', ret);\n    };\n\n    let processMX = function (data, template) {\n        let ret = '';\n        for (let value of data) {\n            ret += (value.name || '@') + '\\t';\n            if (value.ttl) ret += value.ttl + '\\t';\n            ret += 'IN\\tMX\\t' + value.preference + '\\t' + value.host + '\\n';\n        }\n        return template.replace('{mx}', ret);\n    };\n\n    let processPTR = function (data, template) {\n        let ret = '';\n        for (let value of data) {\n            ret += (value.name || '@') + '\\t';\n            if (value.ttl) ret += value.ttl + '\\t';\n            ret += 'IN\\tPTR\\t' + value.host + '\\n';\n        }\n        return template.replace('{ptr}', ret);\n    };\n\n    let processTXT = function (data, template) {\n        let ret = '';\n        for (let value of data) {\n            ret += (value.name || '@') + '\\t';\n            if (value.ttl) ret += value.ttl + '\\t';\n            ret += 'IN\\tTXT\\t' + value.txt + '\\n';\n        }\n        return template.replace('{txt}', ret);\n    };\n\n    let processSRV = function (data, template) {\n        let ret = '';\n        for (let value of data) {\n            ret += (value.name || '@') + '\\t';\n            if (value.ttl) ret += value.ttl + '\\t';\n            ret += 'IN\\tSRV\\t' + value.priority + '\\t';\n            ret += value.weight + '\\t';\n            ret += value.port + '\\t';\n            ret += value.target + '\\n';\n        }\n        return template.replace('{srv}', ret);\n    };\n\n    let processSPF = function (data, template) {\n        let ret = '';\n        for (let value of data) {\n            ret += (value.name || '@') + '\\t';\n            if (value.ttl) ret += value.ttl + '\\t';\n            ret += 'IN\\tSPF\\t' + value.data + '\\n';\n        }\n        return template.replace('{spf}', ret);\n    };\n\n    let processValues = function (options, template) {\n        template = template.replace('{zone}', options['$origin'] || options['soa']['name'] || '');\n        template = template.replace('{datetime}', (new Date()).toISOString());\n        return template.replace('{time}', Math.round(Date.now() / 1000));\n    };\n\n    //////////////////////////////////////////////////////////////////////////////\n\n    let parse = function (text) {\n        text = removeComments(text);\n        text = flatten(text);\n        return parseRRs(text);\n    };\n\n    let removeComments = function (text) {\n        // let re = /(^|[^\\\\])\\;(?=([^\"\\\\]*(\\\\.|\"([^\"\\\\]*\\\\.)*[^\"\\\\]*\"))*[^\"]*$).*/g;\n        // return text.replace(re, function (m, g1) {\n        //     return g1 ? g1 : \"\"; // if g1 is set/matched, re-insert it, else remove\n        // });\n\n        let re = /\\\\\"|\"(?:\\\\\"|[^\"])*\"|((^|[^\\\\])\\;.*)/g;\n        return text.replace(re, function (m, g1) {\n            return !g1 ? m : \"\"; // if g1 is not set/matched, re-insert it, else remove\n        });\n    };\n\n    let flatten = function (text) {\n        let captured = [];\n        let re = /\\([\\s\\S]*?\\)/gim;\n        let match = re.exec(text);\n        while (match !== null) {\n            match.replacement = match[0].replace(/\\s+/gm, ' ');\n            captured.push(match);\n            // captured Text, index, input\n            match = re.exec(text);\n        }\n        let arrText = text.split('');\n        for (match of captured) {\n            arrText.splice(match.index, match[0].length, match.replacement);\n        }\n        return arrText.join('').replace(/\\(|\\)/gim, ' ');\n    };\n\n    let normalizeRR = function (rr, rrType) {\n        let hasName = false;\n        let hasTtl = false;\n        if (rr.match(/^\\s+/)) {\n            hasName = false;\n        } else {\n            hasName = true;\n        }\n        let rrArray = splitArgs(rr, null, true);\n        let typeIndex = rrArray.lastIndexOf(rrType);\n        if (typeIndex === 0 || rrArray[typeIndex - 1] !== 'IN') {\n            rrArray.splice(typeIndex, 0, 'IN');\n        }\n\n        // According to RFC 1035:\n        // <rr> contents take one of the following forms:\n        // [<TTL>] [<class>] <type> <RDATA> -- We assume this one\n        // [<class>] [<TTL>] <type> <RDATA>\n        if (hasName) {\n            if (!isNaN(rrArray[1])) {\n                hasTtl = true;\n            }\n        } else {\n            if (!isNaN(rrArray[0])) {\n                hasTtl = true;\n            }\n        }\n        return {\n            tokens: rrArray,\n            hasName: hasName,\n            hasTtl: hasTtl,\n            typeIndex: typeIndex\n        };\n    };\n\n    let parseRRs = function (text) {\n        let ret = {};\n        let rrs = text.split('\\n');\n        for (let i in rrs) {\n            let rr = rrs[i] || '';\n            if (!rr.trim()) {\n                continue;\n            }\n            let rrArray = splitArgs(rr, null, true);\n            if (rrArray.indexOf('TXT') >= 0) {\n                ret.txt = ret.txt || [];\n                ret.txt.push(parseTXT(normalizeRR(rr, 'TXT'), ret.txt));\n            } else if (rrArray.indexOf('$ORIGIN') === 0) {\n                ret.$origin = rrArray[1];\n            } else if (rrArray.indexOf('$TTL') === 0) {\n                ret.$ttl = rrArray[1];\n            } else if (rrArray.indexOf('SOA') >= 0) {\n                ret.soa = parseSOA(rrArray);\n            } else if (rrArray.indexOf('NS') >= 0) {\n                ret.ns = ret.ns || [];\n                ret.ns.push(parseNS(normalizeRR(rr, 'NS'), ret.ns));\n            } else if (rrArray.indexOf('A') >= 0) {\n                ret.a = ret.a || [];\n                ret.a.push(parseA(normalizeRR(rr, 'A'), ret.a));\n            } else if (rrArray.indexOf('AAAA') >= 0) {\n                ret.aaaa = ret.aaaa || [];\n                ret.aaaa.push(parseAAAA(normalizeRR(rr, 'AAAA'), ret.aaaa));\n            } else if (rrArray.indexOf('CNAME') >= 0) {\n                ret.cname = ret.cname || [];\n                ret.cname.push(parseCNAME(normalizeRR(rr, 'CNAME'), ret.cname));\n            } else if (rrArray.indexOf('MX') >= 0) {\n                ret.mx = ret.mx || [];\n                ret.mx.push(parseMX(normalizeRR(rr, 'MX'), ret.mx));\n            } else if (rrArray.indexOf('PTR') >= 0) {\n                ret.ptr = ret.ptr || [];\n                ret.ptr.push(parsePTR(normalizeRR(rr, 'PTR'), ret.ptr, ret.$origin));\n            } else if (rrArray.indexOf('SRV') >= 0) {\n                ret.srv = ret.srv || [];\n                ret.srv.push(parseSRV(normalizeRR(rr, 'SRV'), ret.srv));\n            } else if (rrArray.indexOf('SPF') >= 0) {\n                ret.spf = ret.spf || [];\n                ret.spf.push(parseSPF(normalizeRR(rr, 'SPF'), ret.spf));\n            }\n        }\n        return ret;\n    };\n\n    let parseSOA = function (rrTokens) {\n        let soa = {};\n        let l = rrTokens.length;\n        soa.name = rrTokens[0];\n        soa.minimum = parseInt(rrTokens[l - 1], 10);\n        soa.expire = parseInt(rrTokens[l - 2], 10);\n        soa.retry = parseInt(rrTokens[l - 3], 10);\n        soa.refresh = parseInt(rrTokens[l - 4], 10);\n        soa.serial = parseInt(rrTokens[l - 5], 10);\n        soa.rname = rrTokens[l - 6];\n        soa.mname = rrTokens[l - 7];\n        if (!isNaN(rrTokens[1])) soa.ttl = parseInt(rrTokens[1], 10);\n        return soa;\n    };\n\n    let parseNS = function (rrData, recordsSoFar) {\n        let rrTokens = rrData.tokens;\n        if (!rrData.hasName) {\n            if (recordsSoFar.length) {\n                rrTokens.unshift(recordsSoFar[recordsSoFar.length - 1].name);\n            } else {\n                rrTokens.unshift('@');\n            }\n        }\n\n        let l = rrTokens.length;\n        let result = {\n            name: rrTokens[0],\n            host: rrTokens[l - 1]\n        };\n\n        if (rrData.hasTtl) result.ttl = parseInt(rrTokens[1], 10);\n        return result;\n    };\n\n    let parseA = function (rrData, recordsSoFar) {\n        let rrTokens = rrData.tokens;\n        if (!rrData.hasName) {\n            if (recordsSoFar.length) {\n                rrTokens.unshift(recordsSoFar[recordsSoFar.length - 1].name);\n            } else {\n                rrTokens.unshift('@');\n            }\n        }\n\n        let l = rrTokens.length;\n        let result = {\n            name: rrTokens[0],\n            ip: rrTokens[l - 1]\n        };\n\n        if (rrData.hasTtl) result.ttl = parseInt(rrTokens[1], 10);\n        return result;\n    };\n\n    let parseAAAA = function (rrData, recordsSoFar) {\n        let rrTokens = rrData.tokens;\n        if (!rrData.hasName) {\n            if (recordsSoFar.length) {\n                rrTokens.unshift(recordsSoFar[recordsSoFar.length - 1].name);\n            } else {\n                rrTokens.unshift('@');\n            }\n        }\n\n        let l = rrTokens.length;\n        let result = {\n            name: rrTokens[0],\n            ip: rrTokens[l - 1]\n        };\n\n        if (rrData.hasTtl) result.ttl = parseInt(rrTokens[1], 10);\n        return result;\n    };\n\n    let parseCNAME = function (rrData, recordsSoFar) {\n        let rrTokens = rrData.tokens;\n        if (!rrData.hasName) {\n            if (recordsSoFar.length) {\n                rrTokens.unshift(recordsSoFar[recordsSoFar.length - 1].name);\n            } else {\n                rrTokens.unshift('@');\n            }\n        }\n\n        let l = rrTokens.length;\n        let result = {\n            name: rrTokens[0],\n            alias: rrTokens[l - 1]\n        };\n\n        if (rrData.hasTtl) result.ttl = parseInt(rrTokens[1], 10);\n        return result;\n    };\n\n    let parseMX = function (rrData, recordsSoFar) {\n        let rrTokens = rrData.tokens;\n        if (!rrData.hasName) {\n            if (recordsSoFar.length) {\n                rrTokens.unshift(recordsSoFar[recordsSoFar.length - 1].name);\n            } else {\n                rrTokens.unshift('@');\n            }\n        }\n\n        let l = rrTokens.length;\n        let result = {\n            name: rrTokens[0],\n            preference: parseInt(rrTokens[l - 2], 10),\n            host: rrTokens[l - 1]\n        };\n\n        if (rrData.hasTtl) result.ttl = parseInt(rrTokens[1], 10);\n        return result;\n    };\n\n    let parseTXT = function (rrData, recordsSoFar) {\n        let rrTokens = rrData.tokens;\n        if (!rrData.hasName) {\n            if (recordsSoFar.length) {\n                rrTokens.unshift(recordsSoFar[recordsSoFar.length - 1].name);\n            } else {\n                rrTokens.unshift('@');\n            }\n        }\n\n        let l = rrTokens.length;\n        let result = {\n            name: rrTokens[0],\n            txt: rrTokens[l - 1]\n        };\n\n        if (rrData.hasTtl) result.ttl = parseInt(rrTokens[1], 10);\n        return result;\n    };\n\n    let parsePTR = function (rrData, recordsSoFar, currentOrigin) {\n        let rrTokens = rrData.tokens;\n        if (!rrData.hasName && recordsSoFar[recordsSoFar.length - 1]) {\n            rrTokens.unshift(recordsSoFar[recordsSoFar.length - 1].name);\n        }\n\n        let l = rrTokens.length;\n        let result = {\n            name: rrTokens[0],\n            fullname: rrTokens[0] + '.' + currentOrigin,\n            host: rrTokens[l - 1]\n        };\n\n        if (rrData.hasTtl) result.ttl = parseInt(rrTokens[1], 10);\n        return result;\n    };\n\n    let parseSRV = function (rrData, recordsSoFar) {\n        let rrTokens = rrData.tokens;\n        if (!rrData.hasName) {\n            if (recordsSoFar.length) {\n                rrTokens.unshift(recordsSoFar[recordsSoFar.length - 1].name);\n            } else {\n                rrTokens.unshift('@');\n            }\n        }\n\n        let l = rrTokens.length;\n        let result = {\n            name: rrTokens[0],\n            target: rrTokens[l - 1],\n            priority: parseInt(rrTokens[l - 4], 10),\n            weight: parseInt(rrTokens[l - 3], 10),\n            port: parseInt(rrTokens[l - 2], 10)\n        };\n\n        if (rrData.hasTtl) result.ttl = parseInt(rrTokens[1], 10);\n        return result;\n    };\n\n    let parseSPF = function (rrData, recordsSoFar) {\n        let rrTokens = rrData.tokens;\n        if (!rrData.hasName) {\n            if (recordsSoFar.length) {\n                rrTokens.unshift(recordsSoFar[recordsSoFar.length - 1].name);\n            } else {\n                rrTokens.unshift('@');\n            }\n        }\n\n        let result = {\n            name: rrTokens[0],\n            data: ''\n        };\n\n        let l = rrTokens.length;\n        while (l-- > (rrData.hasTtl ? 4 : 3)) {\n            result.data = rrTokens[l] + ' ' + result.data.trim();\n        }\n\n        if (rrData.hasTtl) result.ttl = parseInt(rrTokens[1], 10);\n        return result;\n    };\n\n    let splitArgs = function (input, sep, keepQuotes) {\n        let separator = sep || /\\s/g;\n        let singleQuoteOpen = false;\n        let doubleQuoteOpen = false;\n        let tokenBuffer = [];\n        let ret = [];\n\n        let arr = input.split('');\n        for (let i = 0; i < arr.length; ++i) {\n            let element = arr[i];\n            let matches = element.match(separator);\n            if (element === \"'\" && !doubleQuoteOpen) {\n                if (keepQuotes === true) {\n                    tokenBuffer.push(element);\n                }\n                singleQuoteOpen = !singleQuoteOpen;\n                continue;\n            } else if (element === '\"' && !singleQuoteOpen) {\n                if (keepQuotes === true) {\n                    tokenBuffer.push(element);\n                }\n                doubleQuoteOpen = !doubleQuoteOpen;\n                continue;\n            }\n\n            if (!singleQuoteOpen && !doubleQuoteOpen && matches) {\n                if (tokenBuffer.length > 0) {\n                    ret.push(tokenBuffer.join(''));\n                    tokenBuffer = [];\n                } else if (!!sep) {\n                    ret.push(element);\n                }\n            } else {\n                tokenBuffer.push(element);\n            }\n        }\n        if (tokenBuffer.length > 0) {\n            ret.push(tokenBuffer.join(''));\n        } else if (!!sep) {\n            ret.push('');\n        }\n        return ret;\n    };\n\n    if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n        exports.generate = generate;\n        exports.parse = parse;\n    } else {\n        window.zonefile_generate = generate;\n        window.zonefile_parse = parse;\n    }\n\n})();\n"}